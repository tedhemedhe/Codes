// BFS implementation

#include <bits/stdc++.h>
using namespace std;


void addEdge(int u, int v, bool d, unordered_map<int, list<int> >&adj)
{
adj[u].push_back(v);

if(d==0)
{
adj[v].push_back(u);
}
}

void printAdjList(unordered_map<int, list<int> >&adj)
{
for(auto i:adj)
{
cout<<i.first<<"-->";

for(auto j: i.second)
{
cout<<j<<",";
}
cout<<endl;
}
}


void bfs(unordered_map<int, list<int> >&adj, unordered_map<int, bool> &visited, vector <int> &ans, int node)
{
queue <int> q;
q.push(node);
visited[node]=1;

while(!q.empty())
{
int frontnode= q.front();
q.pop();

ans.push_back(frontnode);
for (auto i:adj[frontnode])
{
if(!visited[i])
{
q.push(i);
visited[i]=1;
}
}
}
}






vector<int> breadthfirstsearch(int n, int m, unordered_map<int, list<int> >&adj)
{
unordered_map<int, bool> visited;
vector<int> ans;

for(int i=0; i<n; i++)
{
if(!visited[i])
{
bfs(adj, visited, ans ,i);
}
}
return ans;
}



int main()
{
int n;
cout<<"enter no of nodes"<<endl;
cin>>n;


int m;
cout<<"enter no of edges"<<endl;
cin>>m;

unordered_map<int, list<int> >adj;
for(int i=0; i<m; i++)
{
int u,v;
cin>>u>>v;
addEdge(u,v,0, adj);
}

cout<<"Adjacency List:"<<endl;
printAdjList(adj);


cout<<"BFS traversal is:"<<endl;
for(auto i:breadthfirstsearch(n,m,adj))
cout<<i<< " ";

return 0;
}
